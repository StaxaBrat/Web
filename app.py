from flask import Flask, render_template, request, redirect, url_for, jsonify
import sqlite3
import discord
from discord.ext import commands
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID"))  # ID —Å–µ—Ä–≤–µ—Ä–∞

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
def get_db_connection():
    conn = sqlite3.connect('status.db')
    conn.row_factory = sqlite3.Row
    return conn

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞: —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
@app.route('/')
def index():
    conn = get_db_connection()
    employees = conn.execute("SELECT username, status FROM users").fetchall()
    conn.close()
    return render_template('index.html', employees=employees)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
@app.route('/update_status', methods=['POST'])
def update_status():
    data = request.json
    username = data['username']
    new_status = data['status']

    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    conn = get_db_connection()
    conn.execute("UPDATE users SET status = ? WHERE username = ?", (new_status, username))
    conn.commit()
    conn.close()

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ Discord
    update_discord_status(username, new_status)

    return jsonify({"message": "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!"})

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
@app.route('/add_employee', methods=['POST'])
def add_employee():
    data = request.json
    username = data['username']

    conn = get_db_connection()
    conn.execute("INSERT INTO users (username, status) VALUES (?, ?)", (username, "–ù–µ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"))
    conn.commit()
    conn.close()

    return jsonify({"message": "–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ!"})

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Discord
def update_discord_status(username, new_status):
    ROLE_MAPPING = {
        "‚úÖ–ù–∞ —Ä–æ–±–æ—Ç—ñ": "–ü—Ä–∞—Ü—é—î",
        "üí§–í—ñ–¥–ø–æ—á–∏–≤–∞—î": "–í—ñ–¥–ø–æ—á–∏–≤–∞—î",
        "‚ùå–ù–µ –Ω–∞ —Ä–æ–±–æ—Ç—ñ": "–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
    }

    role_name = ROLE_MAPPING.get(new_status)
    if not role_name:
        return

    bot = commands.Bot(command_prefix="!")

    @bot.event
    async def on_ready():
        guild = bot.get_guild(GUILD_ID)
        member = discord.utils.get(guild.members, name=username)
        if member:
            for role in ROLE_MAPPING.values():
                existing_role = discord.utils.get(guild.roles, name=role)
                if existing_role in member.roles:
                    await member.remove_roles(existing_role)

            new_role = discord.utils.get(guild.roles, name=role_name)
            if new_role:
                await member.add_roles(new_role)

        await bot.close()

    bot.run(TOKEN)

if __name__ == '__main__':
    app.run(debug=True)
